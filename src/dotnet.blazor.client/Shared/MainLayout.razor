@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStore

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>

<MudLayout>
    <MudAppBar Elevation="5" Dense="true" Color="Color.Transparent" >
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudSpacer />
        <MudCheckBox @bind-Checked="@DarkMode" Color="Color.Inherit" UncheckedIcon="@Icons.Outlined.DarkMode" CheckedIcon="@Icons.Filled.WbSunny"/>
        <LoginDisplay />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Docked" Elevation="5">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {


    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var user = (await AuthStat).User;
        if(!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"authentication/login/{Uri.EscapeDataString(NavigationManager.ToBaseRelativePath(NavigationManager.Uri))}");
        }
    }

    private bool _isDarkMode;
    public bool DarkMode {
        get 
		{ 
			return _isDarkMode; 
		}
		set
		{
			_isDarkMode = value;
            localStore.SetItemAsync("DarkMode", _isDarkMode);
			
			StateHasChanged();
		}
    }
    private MudThemeProvider _mudThemeProvider;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && _mudThemeProvider is not null)
        {
            DarkMode = await localStore.GetItemAsync<bool>("DarkMode");
        }
    }
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
}